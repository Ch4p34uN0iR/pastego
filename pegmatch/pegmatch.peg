{
package pegmatch

var PasteContentString string = ""

var ops = map[string]func(bool, bool) bool {
    "&&": func(l, r bool) bool {
        return l && r
    },
    "||": func(l, r bool) bool {
        return l || r
    },
}

func toIfaceSlice(v interface{}) []interface{} {
    if v == nil {
        return nil
    }
    return v.([]interface{})
}

func eval(first, rest interface{}) bool {
    l := first.(bool)
    restSl := toIfaceSlice(rest)
    for _, v := range restSl {
        restExpr := toIfaceSlice(v)
        r := restExpr[3].(bool)
        op := restExpr[1].(string)
        l = ops[op](l, r)
    }
    return l
}

}

/*
 * Terminal words returns a bool, expression are evaluated as bool:
 * if the expression match the logic with the word to search, returns true
 */

Input <- expr:Expr EOF {
    return expr, nil
}

Expr <- _ first:Term rest:( _ BoolOp _ Term )* _ {
    return eval(first, rest), nil
}

Term <- '(' expr:Expr ')' {
    return expr, nil
} / "'" (Search _?)+ "'" {
    var sTemp = string(c.text)
    sTemp = sTemp[1:len(sTemp)-1]
    return strings.Contains(PasteContentString, sTemp), nil
} / boolean:Search {
    return boolean, nil 
} / notop:NotOp? _ expr:Expr {
    return !eval(expr, nil), nil
}


BoolOp <- ( "&&" / "||") {
    return string(c.text), nil
}

Search <- [A-Za-z0-9!@#$%^?/*-+.><]+ {
    return strings.Contains(PasteContentString, string(c.text)), nil
} / NotOp _ search:Search {
    return !eval(search, nil) , nil
}

NotOp <- '~' {
    return string(c.text), nil
}

_ "whitespace" <- [ \n\t\r]*

EOF <- !.
